// Tag„Çí„ÇØ„É™„ÉÉ„ÇØÂæå„Å´ÈÅ∑Áßª„Åô„ÇãTag„ÅßÁµû„Å£„ÅüË®ò‰∫ã‰∏ÄË¶ß„ÇíË°®Á§∫„Åô„Çã„Éö„Éº„Ç∏„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà

import React from "react"
import PropTypes from "prop-types"

// ÂÖ±ÈÄö„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË™≠„ÅøËæº„Åø
import Layout from '../components/layout';
//„Çø„Ç∞„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
import Profile from '../pages/profile';
import SideTagList from '../pages/side_tag_list';
import TwitterTimeLine from '../pages/twitter_timeline';

// Components
import { Link, graphql } from "gatsby"
// CSSË™≠„ÅøËæº„Åø
import * as style from '../components/css/index.module.css';


/**
 * „É™„Çπ„Éà„ÅÆ„Çµ„É†„Éç„Ç§„É´„Å´„Å™„Çãimg„Çø„Ç∞„ÇíËøî„Åô
 * „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Å´„Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÅÆË®≠ÂÆö„Åå„Å™„ÅÑ„Å®„Ç®„É©„Éº„Å´„Å™„Çã„ÅÆ„Åß„ÄÅÁ©∫„Çø„Ç∞„ÇíËøî„Åô„Çà„ÅÜ„Å´„Åó„Å¶„Åæ„Åô„ÄÇ
 * 
 * ‚ÄªË®ò‰∫ã„É™„Çπ„Éà„ÅÆ src\pages\index.js „Å®„Çø„Ç∞„ÅÆË®ò‰∫ã„É™„Çπ„Éà src\templates\tags.js „Å´Ê©üËÉΩ„Å®„Åó„Å¶„ÅØÂêå„ÅòÈñ¢Êï∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
 * „ÄÄÂèåÊñπ„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„ÉÅ„Çß„Éº„É≥„É°„ÇΩ„ÉÉ„Éâ„ÅÆ‰∏¶„Å≥„ÅåÈÅï„ÅÑ„Åæ„Åô„ÄÇ
 * 
 * @param {obj} edge graphql„ÅÆ„Éá„Éº„Çø
 * @returns html
 */
const listImgSrc = (node)=>{
  // console.log(node);
  // debugger
  const hero_image = node.frontmatter.hero_image;
  if(hero_image == null){
    return <></>;
  }else{
    const imgSrc = hero_image.childImageSharp.gatsbyImageData.images.fallback.src;
    return <img src={imgSrc} alt=""></img>;
  }
}

/**
 * Ë®ò‰∫ã‰∏ÄË¶ß„ÅßË®ò‰∫ã„ÅÆ‰∏ÄÈÉ®„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´„ÄÅÁõÆÊ¨°„ÇÑË£ÖÈ£æ„ÇíÂâäÈô§„Åô„Çã(html„Çø„Ç∞„ÇÑÁõÆÊ¨°„ÄÅ„Çø„Éñ„ÄÅÊîπË°å)
 * ‚ÄªË®ò‰∫ã„É™„Çπ„Éà„ÅÆ src\pages\index.js „Å®„Çø„Ç∞„ÅÆË®ò‰∫ã„É™„Çπ„Éà src\templates\tags.js „Å´Ê©üËÉΩ„Å®„Åó„Å¶„ÅØÂêå„ÅòÈñ¢Êï∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
 * 
 * @param {string} _html „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éï„Ç°„Ç§„É´„ÅÆË®ò‰∫ã„Éá„Éº„Çø
 * @return html Ë™øÊï¥Ê∏à„Åø„ÅÆË®ò‰∫ã„Éá„Éº„Çø
*/
const htmlClean = (_html)=>{
  const regexp_html = /<(".*?"|'.*?'|[^'"])*?>/g;//html„Çø„Ç∞„ÇíÊ§úÁü•
  const regexp_toc = /<div .*ÁõÆÊ¨°.*<\/ol><\/div>/g;//ÁõÆÊ¨°„ÅÆhtml„Çø„Ç∞„ÇíÊ§úÁü•

  let html = _html.replace(/\r\n|\n|\r|\t/g, '')//ÊîπË°å„Å®„Çø„ÉñÂâäÈô§
  html = html.replace(regexp_toc, '')//ÁõÆÊ¨°ÂâäÈô§
  html = html.replace(regexp_html, ' ')//HTML„Çø„Ç∞„ÇíÂçäËßí„Çπ„Éö„Éº„Çπ„Å´Â§âÊèõ
  return html;
}

const Tags = ({ pageContext, data }) => {
  const { tag } = pageContext
  const { edges, totalCount } = data.allMarkdownRemark
  const tagHeader = `„Äå${tag} „ÄçTag Ë®ò‰∫ã‰∏ÄË¶ß(${totalCount} post${
    totalCount === 1 ? "" : "s"
  })`
  // const tagHeader = `${totalCount} post${
  //   totalCount === 1 ? "" : "s"
  // } tagged with "${tag}"`

  return (
    <Layout>
      <div>
        <div className={style.tagHeader}>üè∑Ô∏è{tagHeader}</div>
        {/* Ë®ò‰∫ã„É™„Çπ„ÉàÁîüÊàê */}

        {edges.map(({ node }) => {
          const { slug } = node.fields
          const { title } = node.frontmatter
          const { date } = node.frontmatter
            return (
              <div className={style.articleFrame} key={slug}>
                <Link className={style.articleBox} to={slug}>
                  {/* „Ç™„É™„Ç∏„Éä„É´„ÅßËøΩÂä†„Çµ„É†„ÉçÂá∫Âäõ */}
                  {listImgSrc(node)}
                  <div className={style.articleData}>
                    {title}
                    <p>{date}</p>
                  </div>
                  <div className={style.articlePrev}  dangerouslySetInnerHTML={{ __html: htmlClean(node.html) }} />
                </Link>
              </div>
            )
          })}
        {/*
          This links to a page that does not yet exist.
          You'll come back to it!
        */}
        {/* <Link to="/tags">All tags</Link> */}
      </div>
      <div className={style.sideFrame}>
        <Profile />
        <SideTagList />
        <TwitterTimeLine />
      </div>
    </Layout>
  )
}

Tags.propTypes = {
  pageContext: PropTypes.shape({
    tag: PropTypes.string.isRequired,
  }),
  data: PropTypes.shape({
    allMarkdownRemark: PropTypes.shape({
      totalCount: PropTypes.number.isRequired,
      edges: PropTypes.arrayOf(
        PropTypes.shape({
          node: PropTypes.shape({
            frontmatter: PropTypes.shape({
              title: PropTypes.string.isRequired,
            }),
            fields: PropTypes.shape({
              slug: PropTypes.string.isRequired,
            }),
          }),
        }).isRequired
      ),
    }),
  }),
}

export default Tags

export const pageQuery = graphql`
query ($tag: String) {
  allMarkdownRemark(
    limit: 2000
    sort: {frontmatter: {date: DESC}}
    filter: {frontmatter: {tags: {in: [$tag]}}}
  ) {
    totalCount
    edges {
      node {
        fields {
          slug
        }
        frontmatter {
          title
          date
          hero_image {
            childImageSharp {
              gatsbyImageData
            }
          }
        }
        html
      }
    }
  }
}
`
// export const pageQuery = graphql`
//   query($tag: String) {
//     allMarkdownRemark(
//       limit: 2000
//       sort: { frontmatter: { date: DESC }}
//       filter: { frontmatter: { tags: { in: [$tag] } } }
//     ) {
//       totalCount
//       edges {
//         node {
//           fields {
//             slug
//           }
//           frontmatter {
//             title
//           }
//         }
//       }
//     }
//   }
// `