{"version":3,"file":"component---src-pages-using-typescript-tsx-754899cfde7ff3e010d4.js","mappings":"oNAaA,MA+BaA,EAA0BA,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACDH,EAAA,OACCH,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAA,UAAI,0CACJA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,UAAI,cAAe,oBACxDA,EAAAA,cAAA,UAAI,cAAe,gBAAaA,EAAAA,cAAA,UAAI,YAAa,UAEvDA,EAAAA,cAAA,SAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,GAAI,CAACC,GAAG,KAAI,2BACN,C,8ECKX,MArCeC,KACb,MAAMT,GAAOU,EAAAA,EAAAA,IAAe,cAW5B,OACEd,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACW,EAAAA,GAAI,CAACC,GAAG,KAAIZ,EAAAA,cAAA,OAAKe,UCtBR,4BDsB8BX,EAAKI,KAAKQ,aAAad,SAEjEF,EAAAA,cAAA,WACAA,EAAAA,cAAA,MAAIe,UCxBY,gCDyBdf,EAAAA,cAAA,UASEA,EAAAA,cAACW,EAAAA,GAAI,CAACC,GAAG,KAAI,SAEfZ,EAAAA,cAAA,UAAIA,EAAAA,cAACW,EAAAA,GAAI,CAACC,GAAG,UAAS,YAGpB,EEhBR,MApBeK,KACb,MAAMb,GAAOU,EAAAA,EAAAA,IAAe,cAY5B,OACEd,EAAAA,cAAA,cACEA,EAAAA,cAAA,WAAK,eAAaI,EAAKI,KAAKQ,aAAaE,UAAU,OAAI,IAAIC,MAAOC,cAAc,IAAEhB,EAAKI,KAAKQ,aAAad,MAAM,KACxG,ECgCb,MAZeC,IAAmB,IAAlB,SAAEkB,GAAUlB,EAC1B,OACEH,EAAAA,cAAA,WACEA,EAAAA,cAACa,EAAM,MACPb,EAAAA,cAAA,OAAKe,UC7Cc,qCD8ChBM,GAEHrB,EAAAA,cAACiB,EAAM,MACH,C,+EE5BV,MAnBYd,IAAuC,IAAtC,MAAED,EAAK,YAAEoB,EAAW,SAAED,GAAUlB,EAC3C,MAAQD,MAAOqB,EAAcD,YAAaE,ICE7BV,EAAAA,EAAAA,IAAe,cAWhBN,KAAKQ,aDVXS,EAAM,CACVvB,MAAOA,GAASqB,EAChBD,YAAaA,GAAeE,GAG9B,OACExB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQyB,EAAIvB,OACZF,EAAAA,cAAA,QAAM0B,KAAK,cAAcC,QAASF,EAAIH,cACrCD,EACA,C","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/header.js","webpack://gatsby-starter-blog/./src/components/css/header.module.css","webpack://gatsby-starter-blog/./src/components/footer.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/css/layout.module.css","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/hooks/useSiteMetadata.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","// ヘッダー、フッターなどの共通パーツはcomponentsフォルダ配下に作る\r\n\r\nimport * as React from 'react';\r\n// Gatsbyでページ間のリンクを貼る場合はLinkコンポーネントを利用します\r\n// useStaticQuery, graphqlも使うので読み込む\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\n// CSS読み込み(カレントディレクトリで解決すべきリクエストは、'./' で始める必要があるとのこと)\r\nimport * as style from './css/header.module.css';\r\n\r\nconst Header = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return (\r\n    <div>\r\n    <header>\r\n      <Link to=\"/\"><div className={style.h1}>{data.site.siteMetadata.title}</div></Link>\r\n    </header>\r\n    <nav>\r\n    <ul className={style.header}>\r\n      <li>\r\n        {\r\n          /* \r\n            Linkコンポーネントは以下のように使う。\r\n\r\n            外部のページへのリンクはaタグを利用して行います。\r\n            aタグの場合、ページ全体が再読み込みされる。\r\n          */\r\n        }\r\n        <Link to=\"/\">HOME</Link>\r\n      </li>\r\n      <li><Link to=\"/about\">ABOUT</Link></li>\r\n    </ul>\r\n  </nav>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Header;","// extracted by mini-css-extract-plugin\nexport var current = \"header-module--current--1d6d4\";\nexport var h1 = \"header-module--h1--03303\";\nexport var header = \"header-module--header--4d4e3\";","import * as React from 'react';\r\n// useStaticQuery, graphqlも使うので読み込む\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n// CSS読み込み(カレントディレクトリで解決すべきリクエストは、'./' で始める必要があるとのこと)\r\nimport * as style from './css/footer.module.css';\r\n\r\nconst Footer = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            startYear\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return (\r\n    <footer>\r\n      <div>Copyright © {data.site.siteMetadata.startYear} - {new Date().getFullYear()} {data.site.siteMetadata.title} </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","/**\n * すべてのページはLayoutコンポーネントを使ってコンテンツ以外を共通化する\n*/\n\nimport * as React from 'react';\nimport Header from './header';\nimport Footer from './footer';\n// CSS読み込み\nimport * as style from '../components/css/layout.module.css';\n\n/**\n * CSSの読み込み方\n * \n * 以下のどっちかだが、CSS Modulesが良いらしい。\n * \n * 1.基本的なCSS利用方法\n * \n * ・src¥componentsフォルダにglobal.cssを作成する\n * ・普通にCSS核\n * ・import './global.css';という風に対象のコンポーネントでインポートする\n * ・要素ならそのまま反映する\n * ・classはclassName=\"クラス名\"と<h1 className=\"title\">こんな感じで記載する\n * \n * 2.CSS Modulesを使った方法\n * \n * ・componentsフォルダにコンポーネント毎にファイルを作成\n * 　例）index.module.cssとかabout.module.cssとか\n * ・module.cssを各ファイルで読み込む\n * \n * 　インポート例1）import { title } from '../components/index.module.css';\n * 　記載例1）<h1 className={title}>\n * \n *   インポート例2）import IndexModule from '../components/index.module.css';\n * 　記載例2）<h1 className={IndexModule.title}>\n * 　記載例2-1）<h1 className={IndexModule[\"hifun-name\"]}>\n *  ※ハイフンがあると角カッコがいる\n * \n * ・F12でclass名を確認すると class=\"index-module–title–hfJuu\" みたいにランダムの命名になってる\n * 　これにより、モジュールCSSファイル間でクラス名が被っても問題ないということになる\n * \n*/\n\nconst Layout = ({ children }) => {\n  return (\n    <div>\n      <Header />\n      <div className={style.layoutFrame}>\n        {children}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;","// extracted by mini-css-extract-plugin\nexport var layoutFrame = \"layout-module--layoutFrame--cc61d\";","import React from 'react';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\n\nconst Seo = ({ title, description, children }) => {\n  const { title: defaultTitle, description: defaultDescription } =\n    useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n  };\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      {children}\n    </>\n  );\n};\n\n\nexport default Seo;","// gatsby-config.jsのmeta情報のデフォルト値を取得する\r\n// componentsフォルダ下にseo.jsを作成してseo.jsファイルの中で実行される\r\n\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\n\r\nexport const useSiteMetadata = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return data.site.siteMetadata;\r\n};"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","Header","useStaticQuery","className","siteMetadata","Footer","startYear","Date","getFullYear","children","description","defaultTitle","defaultDescription","seo","name","content"],"sourceRoot":""}