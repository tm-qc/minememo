{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/docker3/","result":{"data":{"markdownRemark":{"id":"08dc19be-f7c0-5b0c-b50b-c2fe3c56c055","html":"<div class=\"toc-title\">目次</div>\n<div class=\"toc-block\">\n<ol>\n<li>\n<p><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%94%A8%E8%AA%9E\">用語</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%90%84%E6%A9%9F%E8%83%BD%E3%81%AEdockerfile%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\">各機能のDockerfile+設定ファイルを作成</a></p>\n<ol>\n<li>\n<p><a href=\"#1%E5%89%8D%E6%BA%96%E5%82%99\">1.前準備</a></p>\n</li>\n<li>\n<p><a href=\"#2nginx%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">2.nginxの設定ファイル</a></p>\n<ol>\n<li><a href=\"#1dockerfile\">1.Dockerfile</a></li>\n<li><a href=\"#2defaultconf\">2.default.conf</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"#3php%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">3.phpの設定ファイル</a></p>\n<ol>\n<li><a href=\"#1dockerfile-1\">1.Dockerfile</a></li>\n<li><a href=\"#2phpini\">2.php.ini</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"#4mysql%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">4.mysqlの設定ファイル</a></p>\n<ol>\n<li><a href=\"#1dockerfile-2\">1.Dockerfile</a></li>\n<li><a href=\"#2myconf\">2.my.conf</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"#5docker-compose%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\">5.Docker Composeの設定ファイルを作成</a></p>\n<ol>\n<li><a href=\"#1docker-composeyml%E3%82%92%E4%BD%9C%E6%88%90\">1.docker-compose.ymlを作成</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><a href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">さいごに</a></p>\n</li>\n</ol>\n</div>\n<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>今回業務で開発環境を作る際に共有できるノウハウが存在しないチームだったので、展開できる方法を検討し、Dockerが最適だと判断し個人で勉強しチームに展開まで行いました。</p>\n<p>この通りやれば環境を再現してローカルで使える！というところまで、まとめたので時間がある限りブログに残そうかと思っています。</p>\n<p>今回は第三回目です。<br>\nDockerで環境構築する際に必要な設定ファイルを作成します。</p>\n<p>今回は記事的に長くなると思います。<br>\n読んで理解できる方は必要なものだけ見てもらってもOKです。</p>\n<p>Dockerのインストールやフォルダ作成が終わってない方は、前回の記事を参考にしてみてください。</p>\n<div class=\"boxparts ref\">\n  <div class=\"title\"></div>\n<p><a href=\"https://minememo.work/docker1\">【Docker】#1 はじめに+Dockerとは+Docker Desktopインストール</a><br>\n<a href=\"https://minememo.work/docker2\">【Docker】#2 ローカル(ホスト)に作業フォルダを作成</a></p>\n</div>\n<p>作成する環境は以下の通りです。</p>\n<ul>\n<li>windows pc</li>\n<li>php 8.0.23</li>\n<li>composer 2.4.1</li>\n<li>nginx 1.22.0</li>\n<li>MySQL 8.0.30</li>\n<li>Laravel 6.20.44</li>\n<li>phpMyAdmin最新</li>\n</ul>\n<p>参考にした教材は以下です。<br>\nこちらがなかったらここまで実現できなかったと思います。</p>\n<p>ありがとうございます。</p>\n<div class=\"boxparts ref\">\n  <div class=\"title\"></div>\n<p><a href=\"https://www.udemy.com/course/docker-startup/\">駆け出しエンジニアのためのDocker入門</a></p>\n<p><a href=\"https://qiita.com/hinako_n/items/f15646ea548bcdc8ac6c\">DockerでPHP（Laravel）+ nginx + MySQLのLEMP環境を構築する</a></p>\n</div>\n<p>なお、私自身はインフラ専門家ではないので、インフラの各種機能の設定値は深堀していません。<br>\n本気で事業で使う場合はインフラの専門家の方にDockerファイルを作成+本番環境での運用を想定してもらい、それを作業者は起動、運用するだけ、という風にするのが理想だと思います。</p>\n<h2 id=\"用語\" style=\"position:relative;\"><a href=\"#%E7%94%A8%E8%AA%9E\" aria-label=\"用語 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用語</h2>\n<p>先によく出てくる用語だけ記載しておきます。<br>\n作業中にわからなくなったら見てください。</p>\n<table class=\"cps-table03\" style=\"height: 258px;\"><tbody><tr style=\"height: 19px;\"><th style=\"height: 19px; width: 189.703px;\">ホストOS</th><td class=\"rankinginfo\" style=\"height: 19px; width: 461.297px;\">作業側のパソコン。ローカルともいう</td></tr><tr style=\"height: 19px;\"><th style=\"height: 19px; width: 189.703px;\">Dockerfile</th><td class=\"rankinginfo\" style=\"height: 19px; width: 461.297px;\">イメージをビルドで作るためのDockerの設定ファイル</td></tr><tr style=\"height: 36px;\"><th style=\"height: 36px; width: 189.703px;\">イメージ</th><td class=\"rankinginfo\" style=\"height: 36px; width: 461.297px;\">コンテナを作成するためにDockerfileからビルドで作成されたもの。  \nDockerhubで配布されている公式のイメージもある。</td></tr><tr style=\"height: 19px;\"><th style=\"height: 19px; width: 189.703px;\">ビルド</th><td class=\"rankinginfo\" style=\"height: 19px; width: 461.297px;\">Dockerfileからイメージを作成する事</td></tr><tr style=\"height: 55px;\"><th style=\"height: 55px; width: 189.703px;\">コンテナ</th><td class=\"rankinginfo\" style=\"height: 55px; width: 461.297px;\">イメージから作成された各機能のこと。  \nサービスとも呼ばれる。  \nこのコンテナの集まりで環境が構築される</td></tr><tr style=\"height: 36px;\"><th style=\"height: 36px; width: 189.703px;\">docker-compose</th><td class=\"rankinginfo\" style=\"height: 36px; width: 461.297px;\">複数のコンテナを一気に作成したりできる一元管理機能。  \nDockerを使う場合実質必須になります。</td></tr><tr style=\"height: 74px;\"><th style=\"height: 74px; width: 189.703px;\">docker-compose.yml</th><td class=\"rankinginfo\" style=\"height: 74px; width: 461.297px;\">複数のコンテナを一気に作成、起動したりできるdocker-composeの一元管理ファイル。  \ndocker-composeをインストールしてdocker-compose.ymlを作成してdocker composeコマンドで実行して利用します。</td></tr></tbody></table>\n<h2 id=\"各機能のdockerfile設定ファイルを作成\" style=\"position:relative;\"><a href=\"#%E5%90%84%E6%A9%9F%E8%83%BD%E3%81%AEdockerfile%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\" aria-label=\"各機能のdockerfile設定ファイルを作成 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>各機能のDockerfile+設定ファイルを作成</h2>\n<h3 id=\"1前準備\" style=\"position:relative;\"><a href=\"#1%E5%89%8D%E6%BA%96%E5%82%99\" aria-label=\"1前準備 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.前準備</h3>\n<p>前回docker#2で作成した。<br>\n以下のフォルダをベースに作成していきます。<br>\n未作成の方は前回の記事を参照して作成してみてください。</p>\n<p>前回フォルダを作成したので、今回は★のファイルを作成+設置を行います。</p>\n<p>Dockerfileは拡張なしのファイル名「Dockerfile」でOKです。</p>\n<p>設定ファイル内のコメントが基本説明になっているので、分からない場合は参考にしてください。<br>\n私自身が分かっていない部分もありますが、よろしくお願いします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nginx_mysql_laravel/\t　　　　TOPフォルダ。名前はコンテナ起動前(環境構築前)なら自由に変更可能\n├── laravel \t\t　　　　Laravelのソースコードが置かれるフォルダ=実作業フォルダ\n├── docker\t\t　　　　dockerの設定ファイルや環境設定ファイルを置くフォルダ。\n│ 　　　　　　　　　　　　　　　　ここの配下のフォルダ名を変える場合、\n│ 　　　　　　　　　　　　　　　　Dockerfileとかdocker-compose.ymlでパスの修正が必要です\n│   ├── php\t\t  　　　phpコンテナ(phpの環境構築設定ファイル)\n│   │   ├── Dockerfile★\t\tphpのDockerfile\n│   │   └── php.ini★\t\tphp設定ファイル環境立ち上げるときにコンテナにコピーされます\n│   ├── mysql \t\tMySQLコンテナ(MySQLの環境構築設定ファイル)\n│   │   ├── Dockerfile★\t\tMySQLのDockerfile\n│   │   └── my.conf★\t\tmysql 設定ファイル環境立ち上げるときにコンテナにコピーされます\n│   └── nginx\t\t　　　　nginxコンテナ(nginxの環境構築設定ファイル)\n│   │   ├── Dockerfile★\t\tnginxのDockerfile\n│   │   └── default.conf★\tnginx設定ファイル環境立ち上げるときにコンテナにコピーされます\n│   └── phpmyadmin\t\tphpMyAdminのデータが永続化される場所\n└──  docker-compose.yml★\t\t全コンテナの一括管理をするDockerの設定ファイル</code></pre></div>\n<h3 id=\"2nginxの設定ファイル\" style=\"position:relative;\"><a href=\"#2nginx%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"2nginxの設定ファイル permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.nginxの設定ファイル</h3>\n<p>docker\\nginx配下に以下2ファイルを設置します。</p>\n<h4 id=\"1dockerfile\" style=\"position:relative;\"><a href=\"#1dockerfile\" aria-label=\"1dockerfile permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.Dockerfile</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#nginxのイメージを作成する自作ファイル\n\n#Docker Hub公式からPHPのイメージファイルを使用します。\n#nginxは1.18, 1.20などの偶数バージョンが安定バージョンであり、安定バージョンの使用を推奨されています。\n\n#※Alpineでのbashについて\n#　Alpineをベースとすると bash は使えず、 ash や sh は使えるようです。\n\n#イメージ名:タグ(version指定)\nFROM nginx:1.22-alpine\n\n#サーバー内の環境変数\nENV TZ Asia/Tokyo\n\n#nginxの設定ファイル（default.conf）をDockerの仮想環境内のコンテナ内にコピーします。\nCOPY ./docker/nginx/default.conf /etc/nginx/conf.d/default.conf</code></pre></div>\n<h4 id=\"2defaultconf\" style=\"position:relative;\"><a href=\"#2defaultconf\" aria-label=\"2defaultconf permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.default.conf</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#nginx設定ファイル\n#あまり詳しくないので以下の記事から引用させていただきコメント追加しています。\n#https://qiita.com/hinako_n/items/f15646ea548bcdc8ac6c\n\nserver {\n    listen 80;\n    server_name example.com;\n\n    #ドキュメントルート\n    #localhost:8081でアクセスした場合に表示されるディレクトリ\n    #dockerコンテナのルートに書き換え\n    root /app/public;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    index index.php;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    error_page 404 /index.php;\n\n    location ~ \\.php$ {\n        #FastCGIサーバーのアドレス\n        #FastCGI：Webサーバ上で動くプログラムを一度起動したらしばらく待機させることによって、プログラムの開始と終了にかかる手間を減らし、動きを速くしたりWebサーバの負荷を軽減することができる仕組み\n        #dockerコンテナのphpのポートに書き換え\n        #コンテナ起動後にdocker psで確認したphpのサービスのPORTSが9000/tcpだったので9000になっているっぽい\n        #通常は127.0.0.1:9000に設定されるが、docker-composeはサービス名(今回はphp)にipが自動で振られるのでサービス名にする\n        #参考：https://www.membersedge.co.jp/blog/laravel-development-environment-with-docker-compose/\n\n        fastcgi_pass php:9000;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}</code></pre></div>\n<h3 id=\"3phpの設定ファイル\" style=\"position:relative;\"><a href=\"#3php%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"3phpの設定ファイル permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.phpの設定ファイル</h3>\n<p>docker\\php配下に以下2ファイルを設置します。</p>\n<h4 id=\"1dockerfile-1\" style=\"position:relative;\"><a href=\"#1dockerfile-1\" aria-label=\"1dockerfile 1 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.Dockerfile</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#PHPのイメージを作成する自作ファイル\n\n#Docker Hub公式からPHPのイメージファイルを使用する\n#Laravel 6はphp8.1対応してないみたいなので8.0で。\n#この8.0の部分を変更するだけでバージョン変更できるので簡単！\n\n#イメージ名:タグ(version指定)\n# FROM php:8.1-fpm \nFROM php:8.0-fpm\n\n#サーバー内の環境変数\nENV TZ Asia/Tokyo\n\n#RUN:コンテナビルド時に実行するコマンド\n#インストール可能なパッケージの「一覧」を更新\nRUN apt-get update &amp;&amp; \\\n    #パッケージをインストール(ここでコンテナにnpmやgitなども入ります)\n    #インストール先の確認はdocker-compose exec php dpkg -L パッケージ名でできる\n    #gitの場合 docker-compose exec php dpkg -L git\n    #docker-compose execはdockerのコンテナ内でコマンドを実行するコマンドです。\n\tapt-get install -y git unzip libzip-dev libicu-dev libonig-dev nodejs npm &amp;&amp; \\\n    #PHPの拡張ライブラリをインストール\n\tdocker-php-ext-install intl pdo_mysql zip bcmath\n\n#php.ini(PHPの設定ファイル)をDockerの仮想環境のコンテナにコピー\n#php.iniは自分で用意する必要がある\nCOPY ./docker/php/php.ini /usr/local/etc/php/php.ini\n\n#Laravelを使うためComposerをインストール\n#本当はRUNでコマンドを実行しComposerをインストールしてもいいが、マルチステージビルドという方法でイメージの軽量化を図るための書き方です。\n#この方法でやるのが最近見た感じ多そうでした。\nCOPY --from=composer:2.4.1 /usr/bin/composer /usr/bin/composer\n\n#コンテナ起動中にdocker-compose exec コンテナ名 bash でコンテナ内でbashを動かせるのだが、その際のカレントディレクトリ(初期位置)になる\nWORKDIR /app</code></pre></div>\n<h4 id=\"2phpini\" style=\"position:relative;\"><a href=\"#2phpini\" aria-label=\"2phpini permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.php.ini</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#一般的な設定について、あまり詳しくないので以下から引用させてもらっています。\n#https://qiita.com/hinako_n/items/f15646ea548bcdc8ac6c\n\nzend.exception_ignore_args = off\nexpose_php = on\nmax_execution_time = 30\nmax_input_vars = 1000\nupload_max_filesize = 64M\npost_max_size = 128M\nmemory_limit = 256M\nerror_reporting = E_ALL\ndisplay_errors = on\ndisplay_startup_errors = on\nlog_errors = on\nerror_log = /var/log/php/php-error.log\ndefault_charset = UTF-8\n\n[Date]\ndate.timezone = Asia/Tokyo\n\n[mysqlnd]\nmysqlnd.collect_memory_statistics = on\n\n[Assertion]\nzend.assertions = 1\n\n[mbstring]\nmbstring.language = Japanese</code></pre></div>\n<h3 id=\"4mysqlの設定ファイル\" style=\"position:relative;\"><a href=\"#4mysql%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"4mysqlの設定ファイル permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.mysqlの設定ファイル</h3>\n<h4 id=\"1dockerfile-2\" style=\"position:relative;\"><a href=\"#1dockerfile-2\" aria-label=\"1dockerfile 2 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.Dockerfile</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#mysqlのイメージを作成する自作ファイル\n\n#Docker Hub公式からイメージファイルを使用する\n#イメージ名:タグ(version指定)\nFROM mysql:8.0\n\n#MySQLの設定ファイル（my.conf）Docker内の仮想環境のコンテナ内にコピー\nCOPY ./docker/mysql/my.conf /etc/my.conf</code></pre></div>\n<h4 id=\"2myconf\" style=\"position:relative;\"><a href=\"#2myconf\" aria-label=\"2myconf permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.my.conf</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#あまり詳しくないので以下から引用させていただいてます。\n#https://qiita.com/hinako_n/items/f15646ea548bcdc8ac6c\n\n[mysqld]\n# character\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_0900_ai_ci\n\n# timezone\ndefault-time-zone = SYSTEM\nlog_timestamps = SYSTEM\n\n# Error Log\nlog-error = mysql-error.log\n\n# Slow Query Log\nslow_query_log = 1\nslow_query_log_file = mysql-slow.log\nlong_query_time = 1.0\nlog_queries_not_using_indexes = 0\n\n# General Log\ngeneral_log = 1\ngeneral_log_file = mysql-general.log\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[client]\ndefault-character-set = utf8mb4</code></pre></div>\n<h3 id=\"5docker-composeの設定ファイルを作成\" style=\"position:relative;\"><a href=\"#5docker-compose%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\" aria-label=\"5docker composeの設定ファイルを作成 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.Docker Composeの設定ファイルを作成</h3>\n<p>nginx_mysql_laravel フォルダ直下にdocker-compose.ymlを作成し設置してください。</p>\n<p>docker-compose.ymlは上記1-4で作成したDockerfile+phpMyAdminを一括で起動、管理するために必要なファイルになります。</p>\n<h4 id=\"1docker-composeymlを作成\" style=\"position:relative;\"><a href=\"#1docker-composeyml%E3%82%92%E4%BD%9C%E6%88%90\" aria-label=\"1docker composeymlを作成 permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.docker-compose.ymlを作成</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#参考\n#https://qiita.com/hinako_n/items/f15646ea548bcdc8ac6c\n#https://qiita.com/ucan-lab/items/56c9dc3cf2e6762672f4\n\n#Docker Composeのバージョン\n#https://docs.docker.jp/compose/compose-file/compose-versioning.html#compose-file-versioning\n#※Compose 最新バージョンが3.9みたいなので、それで記載してます。\n#※いまいち最新の推奨が何なのかはわかってないです。すみません。\nversion: \"3.9\"\n\n#使うサービス(機能)を書いていく\nservices:\n  #サービス名(任意で命名)\n  php:\n    #自作のDockerfileからイメージ生成するための記載\n    build:\n      #ビルドを実行する場所\n      context: .\n      #Dockerfileまでのdocker-compose.ymlから見た相対パス\n      dockerfile: ./docker/php/Dockerfile\n    # コンテナを指定しやすくするための名前指定(任意)\n    container_name: php\n    #データの永続化(Dockerを切ってもデータが残るようにする)\n    #Dockerはメモリ上で動くので、永続化しないと作業データが残らなくなります。\n    volumes:\n      #ホスト側の ./laravel/をコンテナ側の /app にマウントし永続化する\n      #コンテナにappフォルダが、ローカルにlaravelフォルダが自動で作成され共有状態になる\n      #※＝ローカルにデータが残り共有されるのでデータの永続化になります。\n      - ./laravel/:/app\n\n  #サービス名  \n  nginx:\n    build:\n      context: .\n      dockerfile: ./docker/nginx/Dockerfile\n    # コンテナを指定しやすくするための名前指定(任意)\n    container_name: nx\n    #http://localhost:ポート番号でアクセスするためのポートフォワーディング設定\n    #ローカルのポート:コンテナのポートと記載する\n    #今回は8081で80(nginxのデフォルトのポート)にポートフォワーディングしてる\n    ports:\n      - 8081:80\n    #サービスの起動順序を制御\n    #php → web の順に起動するように指定\n    #この辺わかってないですが、無くても動くみたいです。\n    depends_on:\n      - php\n    volumes:\n      - ./laravel/:/app\n\n  #サービス名  \n  mysql:\n    build:\n      context: .\n      dockerfile: ./docker/mysql/Dockerfile\n    # コンテナを指定しやすくするための名前指定(任意)\n    container_name: mysql\n    #http://localhost:ポート番号でアクセスするためのポートフォワーディング設定\n    #ローカルのポート:コンテナのポートと記載する\n    ports:\n      - 3306:3306\n    #環境変数の設定。この内容をLaravelの設定ファイルにも書きます。\n    #実際のプロジェクト管理では、環境変数は .env に書いて .gitignore にするなどして、重要な情報が公開されないようにします。\n    environment:\n      MYSQL_DATABASE: database\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: password\n      TZ: 'Asia/Tokyo'\n    volumes:\n      #名前付きボリュームでDBのデータを永続化\n      #Docker内で保持される、一見するとどこに行ったかわからなくなる\n      #確認方法はdocker volume ls、docker volume inspectのMountpointでコンテナ内のパスや名前が確認できる\n      #名前付きボリュームは--volumeオプションで指定して消さないといけない。\n      #しれっとたまるのでデスクトップアプリやdocker volume lsで確認するといい\n\n      #重くなったら以下で整理\n      #docker volume prune:未使用のものをディレクトリ関係なく全領域からもろとも削除\n      #docker-compose down --volumes:今いるディレクトリに対してコンテナ停止、削除、ボリュームを削除する\n      - mysql-volume:/var/lib/mysql\n\n  # phpMyadminのコンテナ作成\n  phpmyadmin:\n    #nginxがあるのでfpm版でと思ったけど、ApacheWebサーバーが含まれてるphpmyadmin:latestにしてます。\n    #※別のWebサーバーが既にある場合phpmyadmin:fpmって書いてあったけど、上手く動かせませんでした\n    \n    #よくphpmyadmin/phpmyadminが使われてるがこれはphpmyadminがdockerHubの公式になるまえのイメージなので、今後は公式のイメージが推奨されてる\n    #https://hub.docker.com/_/phpmyadmin\n    image: phpmyadmin:latest\n\n    #サービスの起動順序を制御\n    #mysql → phpmyadmin の順に起動するように指定\n    #この辺わかってないですが、無くても動くみたいです。\n    depends_on:\n      - mysql\n    container_name: phpmyadmin\n    ports:\n      - \"8080:80\"\n    #phpMyAdmin設定値\n    #https://hub.docker.com/_/phpmyadmin\n    environment:\n      #1に設定すると、任意のサーバーへの接続が許可される\n      - PMA_ARBITRARY=1\n      #サーバーのホスト名かIPアドレスをサービス名で指定\n      #本ファイルの場合mysqlになる\n      - PMA_HOSTS=mysql\n      #サーバーに接続するユーザー名\n      - PMA_USER=root\n      #SQLサーバーに接続するユーザーのパスワード\n      - PMA_PASSWORD=password\n    volumes:\n      - ./docker/phpmyadmin/sessions:/sessions\n#名前付きボリュームの名前(一番下にかく)\nvolumes:\n  mysql-volume:</code></pre></div>\n<div class=\"boxparts ref\">\n  <div class=\"title\"></div>\n<p><strong>Docker Composeで一括管理、起動する理由</strong></p>\n<p>Dockerfileは一つのコンテナのイメージ情報しか持っていません。</p>\n<p>そのため複数コンテナで構築される仮想環境の場合は、docker-compose.ymlで一括管理して起動することで、起動する手間や一個一個起動した際の予期せぬエラーを防ぐことができます。</p>\n<p>例)<br>\nDockerfileをコンテナにする場合は以下2つのコマンドを使います。</p>\n<p>1.docker build(イメージ化)<br>\n2.docker run(イメージをコンテナ化)</p>\n<p>今回はMySQL、php、nginx、phpMyAdminの四つのコンテナで構成されてるので、docker-compose.ymlを使わない場合、毎回起動時にこのセットを4回しないといけなくなります。</p>\n</div>\n<h2 id=\"さいごに\" style=\"position:relative;\"><a href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\" aria-label=\"さいごに permalink\" class=\"toc-icon before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>さいごに</h2>\n<p>今回はこれで完了です。<br>\nお疲れ様でした。</p>\n<p>次回は4「Laravelをコマンドでインストール」を行います。<br>\nその後5で実際にコンテナを起動していきます。</p>\n<p>Dockerシリーズの全体の流れとしては、大きく以下のようになっています。</p>\n<ol>\n<li>Docker Desktopインストール</li>\n<li>ローカルに作業フォルダを作成</li>\n<li>Dockerの設定ファイルを作成</li>\n<li>Laravelをコマンドでインストール</li>\n<li>dockerでコンテナ(機能)を起動+Laravel表示確認</li>\n<li>LaravelのDB設定、確認</li>\n<li>phpMyAdmin表示確認</li>\n<li>出来てる環境の確認</li>\n</ol>\n<div class=\"balloon\">\n  <div class=\"icon\"></div>\n  <div class=\"talk\">\n今回はここでおわりです。 Dockerはコンテナ？イメージ？Dockerfile?docker-compose.yml?などの役割が頭に入ってくると理解しやすくなりますが、  \nそこも慣れなので、焦らずにやっていきましょう。\n  </div>\n</div>","frontmatter":{"date":"2022-10-13","update_at":"2022-10-24","title":"【Docker】#3 Dockerfile+docker-compose.yml+各設定ファイルの設置","hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#083888","images":{"fallback":{"src":"/static/574cd5fb147070ce27674d66e78170e0/cd58f/docker_icon.jpg","srcSet":"/static/574cd5fb147070ce27674d66e78170e0/0f14f/docker_icon.jpg 48w,\n/static/574cd5fb147070ce27674d66e78170e0/db73f/docker_icon.jpg 95w,\n/static/574cd5fb147070ce27674d66e78170e0/cd58f/docker_icon.jpg 190w","sizes":"(min-width: 190px) 190px, 100vw"},"sources":[{"srcSet":"/static/574cd5fb147070ce27674d66e78170e0/7c30c/docker_icon.webp 48w,\n/static/574cd5fb147070ce27674d66e78170e0/2fb9c/docker_icon.webp 95w,\n/static/574cd5fb147070ce27674d66e78170e0/9524e/docker_icon.webp 190w","type":"image/webp","sizes":"(min-width: 190px) 190px, 100vw"}]},"width":190,"height":85}}}}}},"pageContext":{"id":"08dc19be-f7c0-5b0c-b50b-c2fe3c56c055"}},"staticQueryHashes":["2786925534","3000541721","3159585216","3358258035","426580341","602374650"],"slicesMap":{}}