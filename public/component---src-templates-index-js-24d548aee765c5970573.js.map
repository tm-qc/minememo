{"version":3,"file":"component---src-templates-index-js-24d548aee765c5970573.js","mappings":"kNACWA,EAAQ,gCCkCnB,MAtBiBC,IAAsB,IAArB,YAAEC,GAAaD,EAE/B,OADAE,QAAQC,IAAIF,EAAY,YAEtBG,EAAAA,cAAA,OAAKC,UDdkB,yCCerBD,EAAAA,cAACE,EAAAA,GAAI,CAACC,GAAIN,EAAYO,kBAAkBJ,EAAAA,cAAA,QAAMC,UAAWI,GAAa,QAEnEC,EAAAA,EAAAA,GAAIC,MAAMV,EAAYW,gBAAgBC,KAAI,CAACC,EAAEC,IAC7B,IAAfA,EACAX,EAAAA,cAACE,EAAAA,GAAI,CACHU,IAAKD,EACLR,GAAmB,IAAfQ,GAAmC,IAAfA,EAAmB,IAAM,SAASA,GAE1DX,EAAAA,cAAA,YAAOW,IACC,KAIdX,EAAAA,cAACE,EAAAA,GAAI,CAACC,GAAIN,EAAYgB,cAAeb,EAAAA,cAAA,QAAMC,UAAWI,GAAa,OAC/D,C,gHCJV,MAoBMS,EAAaC,IAIjB,IAAIC,EAAOD,EAAME,QAAQ,iBAAkB,IAG3C,OAFAD,EAAOA,EAAKC,QAHO,4BAGa,IAChCD,EAAOA,EAAKC,QALQ,2BAKa,KAC1BD,CAAI,EA+Fb,UA3FkBpB,IAA4B,IAA3B,KAAEsB,EAAI,YAAErB,GAAaD,EAEtC,OACEI,EAAAA,cAACmB,EAAAA,EAAM,KASLnB,EAAAA,cAAA,OAAKC,UAAWI,EAAAA,IAEdL,EAAAA,cAAA,WACCkB,EAAKE,kBAAkBC,MAAMZ,KAAKa,GACjCtB,EAAAA,cAAA,OAAKC,UAAWI,EAAAA,GAAoBO,IAAKU,EAAKC,KAAKC,IAC/CxB,EAAAA,cAACE,EAAAA,GAAI,CAACD,UAAWI,EAAAA,GAAkBF,GAAE,UAAYmB,EAAKC,KAAKE,YAAYC,MAhDjEJ,KAClB,MAAMK,EAAaL,EAAKC,KAAKE,YAAYE,WAGzC,GAAiB,MAAdA,EACD,OAAO3B,EAAAA,cAAAA,EAAAA,SAAA,MACJ,CACH,MAAM4B,EAASD,EAAWE,mBAAmB,GAAGC,gBAAgBC,OAAOC,SAASC,IAEhF,OAAOjC,EAAAA,cAAA,OAAKiC,IAAKL,EAAQM,IAAI,IAC/B,GAwCeC,CAAWb,GACZtB,EAAAA,cAAA,OAAKC,UAAWI,EAAAA,IACbiB,EAAKC,KAAKE,YAAYW,MACvBpC,EAAAA,cAAA,SAAIsB,EAAKC,KAAKE,YAAYY,OAE5BrC,EAAAA,cAAA,OAAKC,UAAWI,EAAAA,GAAoBiC,wBAAyB,CAAEC,OAAQzB,EAAUQ,EAAKC,KAAKP,aAInGhB,EAAAA,cAACwC,EAAAA,QAAQ,CAAC3C,YAAaA,MAIzBG,EAAAA,cAAA,OAAKC,UAAWI,EAAAA,IACdL,EAAAA,cAACyC,EAAAA,QAAO,MACRzC,EAAAA,cAAC0C,EAAAA,QAAW,MACZ1C,EAAAA,cAAC2C,EAAAA,QAAe,OAGX,C","sources":["webpack://gatsby-starter-blog/./src/components/css/pagenate.module.css","webpack://gatsby-starter-blog/./src/pages/paginate.js","webpack://gatsby-starter-blog/./src/templates/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var allow = \"pagenate-module--allow--338a0\";\nexport var pagenateFrame = \"pagenate-module--pagenateFrame--8165a\";","import * as React from 'react';\r\n//GraphQL\r\nimport { Link } from 'gatsby';\r\nimport * as style from '../components/css/pagenate.module.css'\r\n\r\n/**\r\n * ページャのボタン生成コンポーネント \r\n * \r\n * ※ページャの数が増えすぎたら調整用の改修が必要かも\r\n * 何記事単位とかの設定はgatsby-node.jsでしてる\r\n * \r\n * @param {object} data gatsby-node.js > src\\templates\\index.jsの流れで渡されるページャのデータ(pageContext)\r\n */\r\nconst Pagenate = ({ pageContext }) => {\r\n  console.log(pageContext,'Pagenate');\r\n  return (\r\n    <div className={style.pagenateFrame}>\r\n      <Link to={pageContext.previousPagePath}><span className={style.allow}>← </span></Link>\r\n        {/* ページ数分繰り返し */}\r\n        {[...Array(pageContext.numberOfPages)].map((_,pageNumber) => (\r\n          pageNumber !== 0 ? \r\n          <Link \r\n            key={pageNumber} \r\n            to={pageNumber === 0 || pageNumber === 1 ? '/' : '/page/'+pageNumber}\r\n          >\r\n            <span>{pageNumber}</span>\r\n          </Link> : ''\r\n\r\n          \r\n        ))}\r\n      <Link to={pageContext.nextPagePath} ><span className={style.allow}>→ </span></Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagenate","// TOPページになるページ\n\n\nimport * as React from 'react';\n// 共通コンポーネント読み込み\nimport Layout from '../components/layout';\n//タグコンポーネント\nimport Profile from '../pages/profile';\nimport SideTagList from '../pages/side_tag_list';\nimport TwitterTimeLine from '../pages/twitter_timeline';\nimport Paginate from '../pages/paginate';\n//GraphQL\nimport { graphql, Link } from 'gatsby';\n// CSS読み込み\nimport * as style from '../components/css/index.module.css';\n\n\n/**\n * リストのサムネイルになるimgタグを返す\n * マークダウンにアイキャッチ画像の設定がないとエラーになるので、空タグを返すようにしてます。\n * \n * ※記事リストの src\\pages\\index.js とタグの記事リスト src\\templates\\tags.js に機能としては同じ関数があります。\n * 　双方データを取得するチェーンメソッドの並びが違います。\n * \n * @param {obj} edge graphqlのデータ\n * @return html\n */\nconst listImgSrc = (edge)=>{\n  const hero_image = edge.node.frontmatter.hero_image;\n  // console.log(hero_image);\n  // debugger\n  if(hero_image == null){\n    return <></>;\n  }else{\n    const imgSrc = hero_image.childrenImageSharp[0].gatsbyImageData.images.fallback.src;\n    // console.log(hero_image.childrenImageSharp[0].gatsbyImageData.images,'images')\n    return <img src={imgSrc} alt=\"\"></img>;\n  }\n}\n\n/**\n * 記事一覧で記事の一部を表示するために、目次や装飾を削除する(htmlタグや目次、タブ、改行)\n * ※記事リストの src\\pages\\index.js とタグの記事リスト src\\templates\\tags.js に機能としては同じ関数があります。\n * \n * @param {string} _html マークダウンファイルの記事データ\n * @return html 調整済みの記事データ\n*/\nconst htmlClean = (_html)=>{\n  const regexp_html = /<(\".*?\"|'.*?'|[^'\"])*?>/g;//htmlタグを検知\n  const regexp_toc = /<div .*目次.*<\\/ol><\\/div>/g;//目次のhtmlタグを検知\n\n  let html = _html.replace(/\\r\\n|\\n|\\r|\\t/g, '')//改行とタブ削除\n  html = html.replace(regexp_toc, '')//目次削除\n  html = html.replace(regexp_html, ' ')//HTMLタグを半角スペースに変換\n  return html;\n}\n\n// pageContextはページャの情報\nconst IndexPage = ({ data, pageContext }) => {\n  // console.log(data,\"index\")\n  return (\n    <Layout>\n      {\n        /**\n         * Layoutタグの間にコンテンツを入れていましたが、コンテンツはpropsを使って受け取ることができます。\n         * Reactでは親コンポーネントから子コンポーネントにデータを渡す際にpropsを利用します。\n         * \n         * layout.jsで引数で以下の内容を受け取って以下のコンテンツとして表示します。\n        */\n      }\n      <div className={style.indexFrame}>\n        {/* 記事リスト生成 */}\n        <div>\n        {data.allMarkdownRemark.edges.map((edge) => (\n          <div className={style.articleFrame} key={edge.node.id}>\n              <Link className={style.articleBox} to={`/posts/${edge.node.frontmatter.slug}`}>\n                {/* オリジナルで追加サムネ出力 */}\n                {listImgSrc(edge)}\n                <div className={style.articleData}>\n                  {edge.node.frontmatter.title}\n                  <p>{edge.node.frontmatter.date}</p>\n                </div>\n                <div className={style.articlePrev}  dangerouslySetInnerHTML={{ __html: htmlClean(edge.node.html) }} />\n              </Link>\n          </div>\n        ))}\n        <Paginate pageContext={pageContext} />\n        </div>\n      </div>\n      {/* 右サイドバー */}\n      <div className={style.sideFrame}>\n        <Profile />\n        <SideTagList />\n        <TwitterTimeLine />\n        \n      </div>\n    </Layout>\n  );\n};\n\n/**\n * Date(作成)順で記事を取得\n * \n * これがポイント：sort: {frontmatter: {date: DESC}}\n * http://localhost:8000/___graphql\n * これで選択してわかった。\n * \n * ↓ページャーで追加\n * \n*/\nexport const query = graphql`\nquery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: {frontmatter: {date: DESC}}, skip: $skip, limit: $limit\n      ) {\n      edges {\n        node {\n          id\n          html\n          timeToRead\n          frontmatter {\n            title\n            date\n            slug\n            hero_image {\n              childrenImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n    allSite {\n      edges {\n        node {\n          siteMetadata {\n            profile\n            user {\n              name,\n              job,\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;"],"names":["allow","_ref","pageContext","console","log","React","className","Link","to","previousPagePath","style","_toConsumableArray","Array","numberOfPages","map","_","pageNumber","key","nextPagePath","htmlClean","_html","html","replace","data","Layout","allMarkdownRemark","edges","edge","node","id","frontmatter","slug","hero_image","imgSrc","childrenImageSharp","gatsbyImageData","images","fallback","src","alt","listImgSrc","title","date","dangerouslySetInnerHTML","__html","Paginate","Profile","SideTagList","TwitterTimeLine"],"sourceRoot":""}