{"version":3,"file":"component---src-templates-tags-js-a79f57f88feb491972c8.js","mappings":"+MA4BA,MAmBMA,EAAaC,IAIjB,IAAIC,EAAOD,EAAME,QAAQ,iBAAkB,IAG3C,OAFAD,EAAOA,EAAKC,QAHO,4BAGa,IAChCD,EAAOA,EAAKC,QALQ,2BAKa,KAC1BD,CAAI,EA2Eb,UAxEaE,IAA4B,IAA3B,YAAEC,EAAW,KAAEC,GAAMF,EACjC,MAAM,IAAEG,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAS,IAAOJ,EAAG,cAAcE,EAAU,SAChC,IAAfA,EAAmB,GAAK,KAAG,IAM7B,OACEG,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,WACEA,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,IAAiB,MAAIJ,GAGpCH,EAAMQ,KAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,GAASD,EAAKE,QAChB,MAAEC,GAAUH,EAAKI,aACjB,KAAEC,GAASL,EAAKI,YACpB,OACEV,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,GAAoBS,IAAKL,GACvCP,EAAAA,cAACa,EAAAA,GAAI,CAACX,UAAWC,EAAAA,GAAkBW,GAAIP,GAnDnCD,KAGlB,MAAMS,EAAaT,EAAKI,YAAYK,WACpC,GAAiB,MAAdA,EACD,OAAOf,EAAAA,cAAAA,EAAAA,SAAA,MACJ,CACH,MAAMgB,EAASD,EAAWE,gBAAgBC,gBAAgBC,OAAOC,SAASC,IAC1E,OAAOrB,EAAAA,cAAA,OAAKqB,IAAKL,EAAQM,IAAI,IAC/B,GA4CiBC,CAAWjB,GACZN,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,IACbM,EACDT,EAAAA,cAAA,SAAIW,IAENX,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,GAAoBqB,wBAAyB,CAAEC,OAAQrC,EAAUkB,EAAKhB,UAEpF,KASdU,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,IACdH,EAAAA,cAAC0B,EAAAA,QAAO,MACR1B,EAAAA,cAAC2B,EAAAA,QAAW,MACZ3B,EAAAA,cAAC4B,EAAAA,QAAe,OAEX,C","sources":["webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["// Tag„Çí„ÇØ„É™„ÉÉ„ÇØÂæå„Å´ÈÅ∑Áßª„Åô„ÇãTag„ÅßÁµû„Å£„ÅüË®ò‰∫ã‰∏ÄË¶ß„ÇíË°®Á§∫„Åô„Çã„Éö„Éº„Ç∏„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\n// ÂÖ±ÈÄö„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË™≠„ÅøËæº„Åø\r\nimport Layout from '../components/layout';\r\n//„Çø„Ç∞„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà\r\nimport Profile from '../pages/profile';\r\nimport SideTagList from '../pages/side_tag_list';\r\nimport TwitterTimeLine from '../pages/twitter_timeline';\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n// CSSË™≠„ÅøËæº„Åø\r\nimport * as style from '../components/css/index.module.css';\r\n\r\n\r\n/**\r\n * „É™„Çπ„Éà„ÅÆ„Çµ„É†„Éç„Ç§„É´„Å´„Å™„Çãimg„Çø„Ç∞„ÇíËøî„Åô\r\n * „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Å´„Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÅÆË®≠ÂÆö„Åå„Å™„ÅÑ„Å®„Ç®„É©„Éº„Å´„Å™„Çã„ÅÆ„Åß„ÄÅÁ©∫„Çø„Ç∞„ÇíËøî„Åô„Çà„ÅÜ„Å´„Åó„Å¶„Åæ„Åô„ÄÇ\r\n * \r\n * ‚ÄªË®ò‰∫ã„É™„Çπ„Éà„ÅÆ src\\pages\\index.js „Å®„Çø„Ç∞„ÅÆË®ò‰∫ã„É™„Çπ„Éà src\\templates\\tags.js „Å´Ê©üËÉΩ„Å®„Åó„Å¶„ÅØÂêå„ÅòÈñ¢Êï∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\r\n * „ÄÄÂèåÊñπ„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„ÉÅ„Çß„Éº„É≥„É°„ÇΩ„ÉÉ„Éâ„ÅÆ‰∏¶„Å≥„ÅåÈÅï„ÅÑ„Åæ„Åô„ÄÇ\r\n * \r\n * @param {obj} edge graphql„ÅÆ„Éá„Éº„Çø\r\n * @returns html\r\n */\r\nconst listImgSrc = (node)=>{\r\n  // console.log(node);\r\n  // debugger\r\n  const hero_image = node.frontmatter.hero_image;\r\n  if(hero_image == null){\r\n    return <></>;\r\n  }else{\r\n    const imgSrc = hero_image.childImageSharp.gatsbyImageData.images.fallback.src;\r\n    return <img src={imgSrc} alt=\"\"></img>;\r\n  }\r\n}\r\n\r\n/**\r\n * Ë®ò‰∫ã‰∏ÄË¶ß„ÅßË®ò‰∫ã„ÅÆ‰∏ÄÈÉ®„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´„ÄÅÁõÆÊ¨°„ÇÑË£ÖÈ£æ„ÇíÂâäÈô§„Åô„Çã(html„Çø„Ç∞„ÇÑÁõÆÊ¨°„ÄÅ„Çø„Éñ„ÄÅÊîπË°å)\r\n * ‚ÄªË®ò‰∫ã„É™„Çπ„Éà„ÅÆ src\\pages\\index.js „Å®„Çø„Ç∞„ÅÆË®ò‰∫ã„É™„Çπ„Éà src\\templates\\tags.js „Å´Ê©üËÉΩ„Å®„Åó„Å¶„ÅØÂêå„ÅòÈñ¢Êï∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\r\n * \r\n * @param {string} _html „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éï„Ç°„Ç§„É´„ÅÆË®ò‰∫ã„Éá„Éº„Çø\r\n * @return html Ë™øÊï¥Ê∏à„Åø„ÅÆË®ò‰∫ã„Éá„Éº„Çø\r\n*/\r\nconst htmlClean = (_html)=>{\r\n  const regexp_html = /<(\".*?\"|'.*?'|[^'\"])*?>/g;//html„Çø„Ç∞„ÇíÊ§úÁü•\r\n  const regexp_toc = /<div .*ÁõÆÊ¨°.*<\\/ol><\\/div>/g;//ÁõÆÊ¨°„ÅÆhtml„Çø„Ç∞„ÇíÊ§úÁü•\r\n\r\n  let html = _html.replace(/\\r\\n|\\n|\\r|\\t/g, '')//ÊîπË°å„Å®„Çø„ÉñÂâäÈô§\r\n  html = html.replace(regexp_toc, '')//ÁõÆÊ¨°ÂâäÈô§\r\n  html = html.replace(regexp_html, ' ')//HTML„Çø„Ç∞„ÇíÂçäËßí„Çπ„Éö„Éº„Çπ„Å´Â§âÊèõ\r\n  return html;\r\n}\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `„Äå${tag} „ÄçTag Ë®ò‰∫ã‰∏ÄË¶ß(${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  })`\r\n  // const tagHeader = `${totalCount} post${\r\n  //   totalCount === 1 ? \"\" : \"s\"\r\n  // } tagged with \"${tag}\"`\r\n\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <div className={style.tagHeader}>üè∑Ô∏è{tagHeader}</div>\r\n        {/* Ë®ò‰∫ã„É™„Çπ„ÉàÁîüÊàê */}\r\n\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          const { title } = node.frontmatter\r\n          const { date } = node.frontmatter\r\n            return (\r\n              <div className={style.articleFrame} key={slug}>\r\n                <Link className={style.articleBox} to={slug}>\r\n                  {/* „Ç™„É™„Ç∏„Éä„É´„ÅßËøΩÂä†„Çµ„É†„ÉçÂá∫Âäõ */}\r\n                  {listImgSrc(node)}\r\n                  <div className={style.articleData}>\r\n                    {title}\r\n                    <p>{date}</p>\r\n                  </div>\r\n                  <div className={style.articlePrev}  dangerouslySetInnerHTML={{ __html: htmlClean(node.html) }} />\r\n                </Link>\r\n              </div>\r\n            )\r\n          })}\r\n        {/*\r\n          This links to a page that does not yet exist.\r\n          You'll come back to it!\r\n        */}\r\n        {/* <Link to=\"/tags\">All tags</Link> */}\r\n      </div>\r\n      <div className={style.sideFrame}>\r\n        <Profile />\r\n        <SideTagList />\r\n        <TwitterTimeLine />\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\nquery ($tag: String) {\r\n  allMarkdownRemark(\r\n    limit: 2000\r\n    sort: {frontmatter: {date: DESC}}\r\n    filter: {frontmatter: {tags: {in: [$tag]}}}\r\n  ) {\r\n    totalCount\r\n    edges {\r\n      node {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date\r\n          hero_image {\r\n            childImageSharp {\r\n              gatsbyImageData\r\n            }\r\n          }\r\n        }\r\n        html\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n// export const pageQuery = graphql`\r\n//   query($tag: String) {\r\n//     allMarkdownRemark(\r\n//       limit: 2000\r\n//       sort: { frontmatter: { date: DESC }}\r\n//       filter: { frontmatter: { tags: { in: [$tag] } } }\r\n//     ) {\r\n//       totalCount\r\n//       edges {\r\n//         node {\r\n//           fields {\r\n//             slug\r\n//           }\r\n//           frontmatter {\r\n//             title\r\n//           }\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `"],"names":["htmlClean","_html","html","replace","_ref","pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","React","Layout","className","style","map","_ref2","node","slug","fields","title","frontmatter","date","key","Link","to","hero_image","imgSrc","childImageSharp","gatsbyImageData","images","fallback","src","alt","listImgSrc","dangerouslySetInnerHTML","__html","Profile","SideTagList","TwitterTimeLine"],"sourceRoot":""}